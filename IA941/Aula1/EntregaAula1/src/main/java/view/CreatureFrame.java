/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import util.Constants;
import ws3dproxy.CommandExecException;
import ws3dproxy.WS3DProxy;
import ws3dproxy.model.Creature;
import ws3dproxy.model.CreatureState;
import ws3dproxy.model.Thing;
import ws3dproxy.model.World;
import ws3dproxy.model.WorldPoint;


/**
 *
 * @author lucas
 */
public class CreatureFrame extends javax.swing.JFrame {
    
    WS3DProxy proxy = null;
    World world = null;
    Map<String,String> creaturesCreated = new HashMap<String,String>();
    Creature selectedCreature= null;
    WorldPoint selectedCreatureInitialPoint = null;
    WorldPoint selectedCreatureFinalPoint = null;
    double selectedCreatureInitialPitch = 0 ;
    double selectedCreatureFinalPitch = 0 ;
    
    /**
     * Creates new form CreatureFrame
     */
    public CreatureFrame(WS3DProxy proxy, World world) {
        this.proxy = proxy;
        this.world = world;
        initComponents();
        addCreaturesToComboBox(selectCreatureComboBox);
    }
    
    private void addCreaturesToComboBox( JComboBox<String> comboBox ){
        List<Thing> things;
	try {
            things = World.getWorldEntities();
            things.forEach(thing -> {
                if(thing.getName().contains("Creature")) {
                    creaturesCreated.put(Integer.toString(things.indexOf(thing)), thing.getName());
                }
            });
	} catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
	}
    	
        comboBox.removeAllItems();
        creaturesCreated.entrySet().forEach((pair) -> comboBox.addItem(pair.getValue()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newCreaturePanel = new javax.swing.JPanel();
        creatureColorComboBox = new javax.swing.JComboBox<>();
        creatureColorLabel = new javax.swing.JLabel();
        creatureXPositionLabel = new javax.swing.JLabel();
        creatureYPositionLabel = new javax.swing.JLabel();
        creatureXPositionTextField = new javax.swing.JTextField();
        creatureYPositionTextField = new javax.swing.JTextField();
        createCreatureButton = new javax.swing.JButton();
        pitchSlider = new javax.swing.JSlider();
        pitchLabel = new javax.swing.JLabel();
        zeroLabel = new javax.swing.JLabel();
        thsLabel = new javax.swing.JLabel();
        updateCreaturePanel = new javax.swing.JPanel();
        updateCreatureLabel = new javax.swing.JLabel();
        selectCreatureComboBox = new javax.swing.JComboBox<>();
        moveCreaturePanel = new javax.swing.JPanel();
        moveUpButton = new javax.swing.JButton();
        clockwiseRotationButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        antiClockwiseRotationButton = new javax.swing.JButton();
        fuelPane = new javax.swing.JPanel();
        fuelProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Creature");
        setAlwaysOnTop(true);

        newCreaturePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create Creature", 2, 0));

        creatureColorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yellow", "Red" }));

        creatureColorLabel.setText("Color");

        creatureXPositionLabel.setText("X position ");

        creatureYPositionLabel.setText("Y position");

        creatureXPositionTextField.setText("0");

        creatureYPositionTextField.setText("0");

        createCreatureButton.setText("Create Creature");
        createCreatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCreatureButtonActionPerformed(evt);
            }
        });

        pitchSlider.setMaximum(360);
        pitchSlider.setValue(0);

        pitchLabel.setText("Pitch");

        zeroLabel.setText("0ยบ");

        thsLabel.setText("360ยบ");

        javax.swing.GroupLayout newCreaturePanelLayout = new javax.swing.GroupLayout(newCreaturePanel);
        newCreaturePanel.setLayout(newCreaturePanelLayout);
        newCreaturePanelLayout.setHorizontalGroup(
            newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCreaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newCreaturePanelLayout.createSequentialGroup()
                        .addComponent(pitchLabel)
                        .addGap(38, 38, 38)
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(newCreaturePanelLayout.createSequentialGroup()
                                .addComponent(zeroLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(thsLabel))
                            .addComponent(createCreatureButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(newCreaturePanelLayout.createSequentialGroup()
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creatureXPositionLabel)
                            .addComponent(creatureYPositionLabel)
                            .addComponent(creatureColorLabel))
                        .addGap(4, 4, 4)
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(creatureColorComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 159, Short.MAX_VALUE)
                            .addComponent(creatureXPositionTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creatureYPositionTextField, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newCreaturePanelLayout.setVerticalGroup(
            newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCreaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(newCreaturePanelLayout.createSequentialGroup()
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creatureColorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(creatureColorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creatureXPositionLabel)
                            .addComponent(creatureXPositionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creatureYPositionLabel)
                            .addComponent(creatureYPositionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pitchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zeroLabel)
                    .addComponent(thsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createCreatureButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        updateCreaturePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Creature", 2, 0));

        updateCreatureLabel.setText("Creature");

        selectCreatureComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCreatureComboBoxActionPerformed(evt);
            }
        });

        moveCreaturePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Move", 2, 0));

        moveUpButton.setText("Move Forward");
        moveUpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveUpButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                moveUpButtonMouseReleased(evt);
            }
        });

        clockwiseRotationButton.setText("Rotate Right");
        clockwiseRotationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clockwiseRotationButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clockwiseRotationButtonMouseReleased(evt);
            }
        });

        moveDownButton.setText("Move Backward");
        moveDownButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveDownButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                moveDownButtonMouseReleased(evt);
            }
        });

        antiClockwiseRotationButton.setText("Rotate Left");
        antiClockwiseRotationButton.setToolTipText("");
        antiClockwiseRotationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                antiClockwiseRotationButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                antiClockwiseRotationButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout moveCreaturePanelLayout = new javax.swing.GroupLayout(moveCreaturePanel);
        moveCreaturePanel.setLayout(moveCreaturePanelLayout);
        moveCreaturePanelLayout.setHorizontalGroup(
            moveCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moveCreaturePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(antiClockwiseRotationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clockwiseRotationButton)
                .addGap(38, 38, 38))
        );
        moveCreaturePanelLayout.setVerticalGroup(
            moveCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveCreaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moveUpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(moveCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(antiClockwiseRotationButton)
                    .addComponent(moveDownButton)
                    .addComponent(clockwiseRotationButton))
                .addContainerGap())
        );

        fuelPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fuel", 2, 0));

        fuelProgressBar.setMaximum(1000);

        javax.swing.GroupLayout fuelPaneLayout = new javax.swing.GroupLayout(fuelPane);
        fuelPane.setLayout(fuelPaneLayout);
        fuelPaneLayout.setHorizontalGroup(
            fuelPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fuelPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fuelProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        fuelPaneLayout.setVerticalGroup(
            fuelPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fuelPaneLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(fuelProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout updateCreaturePanelLayout = new javax.swing.GroupLayout(updateCreaturePanel);
        updateCreaturePanel.setLayout(updateCreaturePanelLayout);
        updateCreaturePanelLayout.setHorizontalGroup(
            updateCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateCreaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveCreaturePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(updateCreaturePanelLayout.createSequentialGroup()
                        .addComponent(updateCreatureLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectCreatureComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fuelPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        updateCreaturePanelLayout.setVerticalGroup(
            updateCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateCreaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCreatureLabel)
                    .addComponent(selectCreatureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveCreaturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fuelPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newCreaturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateCreaturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newCreaturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 227, Short.MAX_VALUE))
                    .addComponent(updateCreaturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createCreatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCreatureButtonActionPerformed
        try {
            int xPosition = Integer.parseInt(creatureXPositionTextField.getText());
            int yPosition = Integer.parseInt(creatureYPositionTextField.getText());
            
            int color = creatureColorComboBox.getSelectedIndex();
            int pitch = pitchSlider.getValue();
            Creature creature = this.proxy.createCreature(xPosition, yPosition, pitch, color);
            creaturesCreated.put(creature.getIndex(), creature.getName());
            selectCreatureComboBox.addItem(creature.getName());
            JOptionPane.showMessageDialog(this, "Creature created with name: "+creature.getName());    
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Failed to create a creature!");
        }
    }//GEN-LAST:event_createCreatureButtonActionPerformed

    private void antiClockwiseRotationButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_antiClockwiseRotationButtonMouseReleased
        stopSelectedCreature();
    }//GEN-LAST:event_antiClockwiseRotationButtonMouseReleased

    private void antiClockwiseRotationButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_antiClockwiseRotationButtonMousePressed
        try {
            this.selectedCreature.rotate(-Constants.CREATURE_VELOCITY);
            this.selectedCreature.start();
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_antiClockwiseRotationButtonMousePressed

    private void moveDownButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveDownButtonMouseReleased
        stopSelectedCreature();
    }//GEN-LAST:event_moveDownButtonMouseReleased

    private void moveDownButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveDownButtonMousePressed
        try {
            this.selectedCreature.move(-Constants.CREATURE_VELOCITY, -Constants.CREATURE_VELOCITY, 0);
            this.selectedCreature.start();
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_moveDownButtonMousePressed

    private void clockwiseRotationButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockwiseRotationButtonMouseReleased
        stopSelectedCreature();
    }//GEN-LAST:event_clockwiseRotationButtonMouseReleased

    private void clockwiseRotationButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockwiseRotationButtonMousePressed
        try {
            this.selectedCreature.rotate(Constants.CREATURE_VELOCITY);
            this.selectedCreature.start();
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clockwiseRotationButtonMousePressed

    private void moveUpButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveUpButtonMouseReleased
        stopSelectedCreature();
    }//GEN-LAST:event_moveUpButtonMouseReleased

    private void moveUpButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveUpButtonMousePressed
        try {
            this.selectedCreature.move(Constants.CREATURE_VELOCITY, Constants.CREATURE_VELOCITY, 0);
            this.selectedCreature.start();
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_moveUpButtonMousePressed

    private void selectCreatureComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCreatureComboBoxActionPerformed
        try {
            this.selectedCreature = proxy.getCreature(Integer.toString(selectCreatureComboBox.getSelectedIndex()));
            this.selectedCreatureInitialPoint = new WorldPoint(selectedCreature.getAttributes().getCOM().getX(), selectedCreature.getAttributes().getCOM().getY());
            selectedCreatureInitialPitch =  selectedCreature.getAttributes().getPitch();
            int fuel = (int) selectedCreature.getFuel();
            fuelProgressBar.setValue(fuel);
        } catch (CommandExecException ex) {
            JOptionPane.showMessageDialog(this, "Falied to select creature!");
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_selectCreatureComboBoxActionPerformed
    
    private void getGenearalCreatureInformationBeforeMove(){
        this.selectedCreatureInitialPoint = new WorldPoint(selectedCreature.getAttributes().getCOM().getX(), selectedCreature.getAttributes().getCOM().getY());
        selectedCreatureInitialPitch = selectedCreature.getPitch();
    }
    private void stopSelectedCreature(){
        try{ 
            this.selectedCreature.stop();
            this.selectedCreature.updateState();
            this.selectedCreatureFinalPoint = new WorldPoint(selectedCreature.getAttributes().getCOM().getX(), selectedCreature.getAttributes().getCOM().getY());
            this.selectedCreatureFinalPitch = selectedCreature.getAttributes().getPitch();
            updateCreature();
        } catch (CommandExecException ex) {
            Logger.getLogger(CreatureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateCreature(){
        double fuel = selectedCreature.getAttributes().getFuel();
        fuelProgressBar.setValue((int)fuel);
        selectedCreature.update(selectedCreature.getIndex(), 
                selectedCreature.getColor(), 
                selectedCreature.getSpeed(), 
                selectedCreature.getWheel(), 
                selectedCreature.getAttributes().getPitch(), 
                selectedCreature.getAttributes().getFuel(), 
                selectedCreature.getAttributes().getSerotonin(), 
                selectedCreature.getAttributes().getEndorphine(), 
                selectedCreature.getAttributes().getScore(), 
                selectedCreatureFinalPoint, 
                selectedCreature.getAttributes().getX1(), 
                selectedCreature.getAttributes().getY1(), 
                selectedCreature.getAttributes().getX2(), 
                selectedCreature.getAttributes().getY2(), 
                selectedCreature.getLeaflets(),
                0);
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton antiClockwiseRotationButton;
    private javax.swing.JButton clockwiseRotationButton;
    private javax.swing.JButton createCreatureButton;
    private javax.swing.JComboBox<String> creatureColorComboBox;
    private javax.swing.JLabel creatureColorLabel;
    private javax.swing.JLabel creatureXPositionLabel;
    private javax.swing.JTextField creatureXPositionTextField;
    private javax.swing.JLabel creatureYPositionLabel;
    private javax.swing.JTextField creatureYPositionTextField;
    private javax.swing.JPanel fuelPane;
    private javax.swing.JProgressBar fuelProgressBar;
    private javax.swing.JPanel moveCreaturePanel;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JPanel newCreaturePanel;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JSlider pitchSlider;
    private javax.swing.JComboBox<String> selectCreatureComboBox;
    private javax.swing.JLabel thsLabel;
    private javax.swing.JLabel updateCreatureLabel;
    private javax.swing.JPanel updateCreaturePanel;
    private javax.swing.JLabel zeroLabel;
    // End of variables declaration//GEN-END:variables
}
